@page "/movies/{Name}"
@page "/movies/highly-rated"
@page "/movies/novelties"
@page "/movies/recommendations"

@inject NavigationManager _navigation
@inject IMovieService _movieService
@inject IUserService _userService

<PageTitle>Movies</PageTitle>

<div style="margin-bottom:10px">
<MovieFilter @bind-Movies="@_movies" AllMovies="@_allMovies"></MovieFilter>
</div>
<div class="row row row-cols-1 row-cols-sm-2 row-cols-md-4 row-cols-xl-6 g-3">
    @foreach (var movie in _movies)
    {
        <div class="col">
            <MovieCard Movie="@movie" User="@_user" OnSave="OnSavedAsync"></MovieCard>
        </div>
    }
</div>

@code {
    [Parameter] public string Name { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<GetMovie> _movies;
    private IEnumerable<GetMovie> _allMovies;
    private ClaimsPrincipal _user;

    protected override async Task OnInitializedAsync()
    {
        Initialise();
        var authState = await authenticationStateTask;
        _user = authState.User;
        if (_navigation.Uri.Contains("highly-rated"))
        {
            _allMovies = await _movieService.GetHighlyRatedMoviesAsync(100);
        }
        else if (_navigation.Uri.Contains("novelties"))
        {
            _allMovies = await _movieService.GetNoveltiesAsync(100);
        }
        else if (_navigation.Uri.Contains("recommendations"))
        {
            if (_user.Identity != null && _user.Identity.IsAuthenticated && _user.IsInRole("user"))
            {
                var identity = _user.Identity as ClaimsIdentity;
                var userIdClaim = identity.Claims.First(x => x.Type == "sub");
                var userId = Guid.Parse(userIdClaim.Value);
                _allMovies = await _userService.GetRecommendationsAsync(userId, 100);
            }
        }
        else
        {
            _allMovies = await _movieService.GetMoviesAsync();
        }
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Name) && Name != "all")
        {
            _allMovies = _allMovies.Where(x => x.Name == Name).ToList();
            _movies = _allMovies.ToList();
        }
    }

    protected async Task OnSavedAsync(int movieId)
    {
        var getMovie = await _movieService.GetMovieAsync(movieId);
        var movie = _movies.First(x => x.Id == movieId);
        movie.Savings = getMovie.Savings.ToList();
    }

    private void Initialise()
    {
        _movies = new List<GetMovie>();
        _allMovies = new List<GetMovie>();
        _user = new ClaimsPrincipal();
    }
}
