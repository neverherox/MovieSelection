@inject IRateService _rateService
@inject NavigationManager _navigation

<Div Display="Display.Flex" Style="width:400px; flex-wrap: wrap">
    <Div Display="Display.InlineBlock" Width="Width.Is25">@Math.Round(Rate.Value, 1) <br> @Rate.ValuesCount rates</Div>
    <Div Display="Display.InlineBlock" Width="Width.Is75">
        <Div>
            Directing: <Progress Size="Size.Small" Min="0" Max="10" Value="@Convert.ToInt32(Rate.Directing)"></Progress>
        </Div>
        <Div>
            Actors: <Progress Size="Size.Small" Min="0" Max="10" Value="@Convert.ToInt32(Rate.Actors)"></Progress>
        </Div>
        <Div>
            Entertainment: <Progress Size="Size.Small" Min="0" Max="10" Value="@Convert.ToInt32(Rate.Entertainment)"></Progress>
        </Div>
        <Div>
            Plot: <Progress Size="Size.Small" Min="0" Max="10" Value="@Convert.ToInt32(Rate.Plot)"></Progress>
        </Div>
    </Div>
    <Div Display="Display.Block" Width="Width.Is100">
        <Button Block Clicked="@ShowModal">@_rate</Button>
    </Div>

</Div>

<Modal @ref="_modal">
    <ModalContent Size="ModalSize.Default" Centered>
        <ModalHeader>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>Your rate</Field>
            <Rating @bind-SelectedValue="@_value" MaxValue="10" />
            <Field>What do you like most?</Field>
            <Check TValue="bool" @bind-Checked="@_isDirectingSet">Directing</Check>
            <Check TValue="bool" @bind-Checked="@_isActorsSet">Actors</Check>
            <Check TValue="bool" @bind-Checked="@_isEntertainmentSet">Entertainment</Check>
            <Check TValue="bool" @bind-Checked="@_isPlotSet">Plot</Check>
        </ModalBody>
        <ModalFooter>
            <Button Clicked="@HideModalAsync">Rate</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public GetRate Rate { get; set; }
    [Parameter] public int MovieId { get; set; }
    [Parameter] public EventCallback OnRate { get; set; }
    [Parameter] public ClaimsPrincipal User { get; set; }

    private Modal _modal;
    private int _value;
    private bool _isDirectingSet;
    private bool _isActorsSet;
    private bool _isEntertainmentSet;
    private bool _isPlotSet;
    private Guid? _userId;
    private string _rate = "Rate";
    private bool _isRated;

    protected override void OnInitialized()
    {
        if (User.Identity != null && User.Identity.IsAuthenticated && User.IsInRole("user"))
        {
            var identity = User.Identity as ClaimsIdentity;
            var userIdClaim = identity.Claims.First(x => x.Type == "sub");
            _userId = Guid.Parse(userIdClaim.Value);
            ApplyRateText();
        }
    }

    protected override void OnParametersSet()
    {
        ApplyRateText();
    }

    private void ShowModal()
    {
        if (_userId.HasValue)
        {
            _modal.Show();
        }
        else
        {
            _navigation.NavigateTo("authentication/login");
        }
    }

    private async Task HideModalAsync()
    {
        if (_value != 0)
        {
            var rate = new Rate
            {
                Value = _value,
                Directing = _isDirectingSet ? _value : null,
                Actors = _isActorsSet ? _value : null,
                Entertainment = _isEntertainmentSet ? _value : null,
                Plot = _isPlotSet ? _value : null,
                MovieId = MovieId,
                UserId = _userId.Value
            };
            if (_isRated)
            {
                var rateId = Rate.Rates.First(x => x.MovieId == MovieId && x.UserId == _userId).Id;
                rate.Id = rateId;
                await _rateService.PutRateAsync(rate);
            }
            else
            {
                await _rateService.PostRateAsync(rate);
            }
            await OnRate.InvokeAsync();
            await _modal.Hide();
        }
    }

    public void ApplyRateText()
    {

        _isRated = Rate.Rates.FirstOrDefault(x => x.MovieId == MovieId && x.UserId == _userId) != null;
        if (_isRated)
        {
            _rate = "Rerate";
        }
    }
}
