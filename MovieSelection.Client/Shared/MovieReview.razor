@inject IReviewLikeService _reviewLikeService
@inject NavigationManager _navigation

<Card Height="Height.Is100" @onclick="ShowModal" Class="review-cursor">
    <CardHeader>@Review.UserName</CardHeader>
    <CardBody>
        <CardText TextOverflow="TextOverflow.Truncate">
            @Review.Text
        </CardText>
    </CardBody>
    <CardFooter>
        <Div Float="Float.Start" Display="Display.InlineBlock">
            @Review.ReviewDate.Date.ToString("dd MMMM yyyy", _ci)
        </Div>
        <Div Float="Float.End" Display="Display.InlineBlock">
            <Icon Name="IconName.ThumbsUp" Class=@(_likeStyle + " " + "like-cursor") @onclick="() => LikeAsync(true)"></Icon>
            <p class="@_likesCountStyle">@Review.LikesCount</p>
            <Icon Name="IconName.ThumbsDown" Class=@(_dislikeStyle + " " + "like-cursor") @onclick="() => LikeAsync(false)"></Icon>
        </Div>
    </CardFooter>
</Card>

<Modal @ref="_modal">
    <ModalContent Size="ModalSize.Default" Centered>
        <ModalHeader>
            @Review.UserName <CloseButton />
        </ModalHeader>
        <ModalBody>
            @Review.Text
        </ModalBody>
        <ModalFooter>
            <Div Float="Float.Start" Display="Display.InlineBlock">
                @Review.ReviewDate.Date.ToString("dd MMMM yyyy", _ci)
            </Div>
            <Div Float="Float.End" Display="Display.InlineBlock">
                <Icon Name="IconName.ThumbsUp" Class=@(_likeStyle + " " + "like-cursor") @onclick="() => LikeAsync(true)"></Icon>
                <p class="@_likesCountStyle">@Review.LikesCount</p>
                <Icon Name="IconName.ThumbsDown" Class=@(_dislikeStyle + " " + "like-cursor") @onclick="() => LikeAsync(false)"></Icon>
            </Div>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter] public GetReview Review { get; set; }
    [Parameter] public ClaimsPrincipal User { get; set; }
    [Parameter] public EventCallback OnLike { get; set; }

    private CultureInfo _ci = new CultureInfo("en-US");
    private Guid? _userId;
    private string _likeStyle = "not-liked";
    private string _dislikeStyle = "not-liked";
    private string _likesCountStyle;
    private Modal _modal;

    protected override void OnInitialized()
    {
        ApplyLikesCountStyle();
        ApplyLikeStyle();
        if (User.Identity != null && User.Identity.IsAuthenticated && User.IsInRole("user"))
        {
            var identity = User.Identity as ClaimsIdentity;
            var userIdClaim = identity.Claims.First(x => x.Type == "sub");
            _userId = Guid.Parse(userIdClaim.Value);
        }
    }

    protected override void OnParametersSet()
    {
        ApplyLikesCountStyle();
        ApplyLikeStyle();
    }

    private async Task LikeAsync(bool isLike)
    {
        if (_userId.HasValue)
        {
            var reviewLike = Review.Likes.FirstOrDefault(x => x.UserId == _userId && x.ReviewId == Review.Id);
            if (reviewLike == null)
            {
                reviewLike = new ReviewLike
                    {
                        UserId = _userId.Value,
                        ReviewId = Review.Id,
                        Like = isLike
                    };
                await _reviewLikeService.PostReviewLikeAsync(reviewLike);
            }
            else
            {
                if (reviewLike.Like == isLike)
                {
                    await _reviewLikeService.DeleteReviewLikeAsync(reviewLike.Id);
                }
                else
                {
                    reviewLike.Like = isLike;
                    await _reviewLikeService.PutReviewLikeAsync(reviewLike);
                }
            }
            await OnLike.InvokeAsync();
        }
        else
        {
            _navigation.NavigateTo("authentication/login");
        }
    }

    private void ApplyLikesCountStyle()
    {
        _likesCountStyle = Review.LikesCount == 0? 
            "" :
            Review.LikesCount < 0 ? "dislike" : "like";
    }

    private void ApplyLikeStyle()
    {
        if (_userId.HasValue)
        {
            var reviewLike = Review.Likes.FirstOrDefault(x => x.UserId == _userId && x.ReviewId == Review.Id);
            if (reviewLike == null)
            {
                _likeStyle = "not-liked";
                _dislikeStyle = "not-liked";
            }
            else
            {
                if (reviewLike.Like)
                {
                    _likeStyle = "like";
                    _dislikeStyle = "not-liked";
                }
                else
                {
                    _dislikeStyle = "dislike";
                    _likeStyle = "not-liked";
                }
            }
        }
    }

    private void ShowModal()
    {
        _modal.Show();
    }
}

<style>
    .review-cursor {

    }

    .review-cursor:hover {
        cursor: pointer;
    }

    .like-cursor {

    }

    .like-cursor:hover {
        cursor: pointer;
    }

    .like {
        color: green;
    }

    .dislike {
        color: red;
    }

    .not-liked {
        color: lightgray;
    }
</style>
