@page "/"

@inject NavigationManager _navigation
@inject IMovieService _movieService
@inject IUserService _userService

<Div>
    <ShowMoreMovies Movies="@_highlyRatedMovies" Name="Highly rated" ShowMoreUrl="movies/highly-rated" OnSave="OnSavedAsync" User="@_user"></ShowMoreMovies>
    <ShowMoreMovies Movies="@_novelties" Name="Novelties" ShowMoreUrl="movies/novelties" OnSave="OnSavedAsync" User="@_user"></ShowMoreMovies>
    <AuthorizeView>
        <Authorized>
            <Div>
                @if (_recommendations.Any())
                {
                    <ShowMoreMovies Movies="@_recommendations" Name="For you" ShowMoreUrl="movies/recommendations" OnSave="OnSavedAsync" User="@_user"></ShowMoreMovies>
                }
                else
                {
                    <h1>Please rate some movies, so we can calculate recommendations for you</h1>
                }
            </Div>
        </Authorized>
    </AuthorizeView>
</Div>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<GetMovie> _highlyRatedMovies;
    private IEnumerable<GetMovie> _novelties;
    private IEnumerable<GetMovie> _recommendations;
    private ClaimsPrincipal _user;
    private Guid? _userId;

    protected override async Task OnInitializedAsync()
    {
        Initialise();
        var authState = await authenticationStateTask;
        _user = authState.User;
        _highlyRatedMovies = await _movieService.GetHighlyRatedMoviesAsync(5);
        _novelties = await _movieService.GetNoveltiesAsync(5);
        if (_user.Identity != null && _user.Identity.IsAuthenticated && _user.IsInRole("user"))
        {
            var identity = _user.Identity as ClaimsIdentity;
            var userIdClaim = identity.Claims.First(x => x.Type == "sub");
            _userId = Guid.Parse(userIdClaim.Value);
            _recommendations = await _userService.GetRecommendationsAsync(_userId.Value, 5);
        }
    }

    protected virtual async Task OnSavedAsync()
    {
        _highlyRatedMovies = await _movieService.GetHighlyRatedMoviesAsync(5);
        _novelties = await _movieService.GetNoveltiesAsync(5);
        if (_userId.HasValue)
        {
            _recommendations = await _userService.GetRecommendationsAsync(_userId.Value, 5);
        }
    }

    private void Initialise()
    {
        _highlyRatedMovies = new List<GetMovie>();
        _novelties = new List<GetMovie>();
        _recommendations = new List<GetMovie>();
        _user = new ClaimsPrincipal();
    }
}
