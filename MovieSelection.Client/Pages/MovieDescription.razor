@page "/movie/{Id:int}"

@inject IMovieService _movieService
@inject ISavingService _savingService
@inject NavigationManager _navigation

<div style="display:flex">
    <div style="display:inline-block; width:30%">
        <div>
            <img src=@("data:image/png;base64," + Convert.ToBase64String(_movie.Image)) class="img-fluid" style="max-height:450px;" />
        </div>
        <Button Clicked="SaveMovieAsync" Border="Border.Is1" Margin="Margin.Is1">
            <Icon Name="IconName.Bookmark" class="@_saveStyle"></Icon> Save movie
        </Button>
    </div>
    <div style="display:inline-block; width: 70%;" align="center" class="lh-sm">
        <h2>@_movie.Name</h2>
        <span>@_movie.Year</span><br>
        <span>@_movie.Country.Name</span><br>
        <span>@string.Join(", ", _movie.Genres.Select(x => x.Name))</span>
        <p>
            @_movie.Description
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Cras fermentum odio eu feugiat pretium nibh ipsum consequat. Pulvinar etiam non quam lacus suspendisse faucibus interdum posuere. Nunc sed velit dignissim sodales ut. Mi bibendum neque egestas congue quisque egestas diam in arcu. Quis vel eros donec ac odio tempor. Fermentum posuere urna nec tincidunt praesent. Eget velit aliquet sagittis id consectetur. Molestie at elementum eu facilisis sed odio morbi quis commodo. Ut consequat semper viverra nam libero justo laoreet sit.
        </p>
    </div>
</div>
<Divider />

<MovieRate Rate="@_rate" MovieId="@Id" OnRate="OnRatedAsync" User="@_user"></MovieRate>

<Divider />

<MovieReviews Reviews="@_reviews" MovieId="@Id" OnReview="OnReviewedAsync" User="@_user"></MovieReviews>

<Divider />

<MovieActors Actors="@_actors"></MovieActors>

@code {
    [Parameter] public int Id { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private GetMovie _movie;
    private GetRate _rate;
    private IEnumerable<Actor> _actors;
    private IEnumerable<GetReview> _reviews;
    private ClaimsPrincipal _user;
    private bool _isSaved;
    private string _saveStyle = "not-saved";
    private Guid? _userId;

    protected override async Task OnInitializedAsync()
    {
        Initialise();
        _movie = await _movieService.GetMovieAsync(Id);
        _rate = await _movieService.GetRateAsync(Id);
        _actors = await _movieService.GetActorsAsync(Id);
        _reviews = await _movieService.GetReviewsAsync(Id);
        var authState = await authenticationStateTask;
        _user = authState.User;
        if (_user.Identity != null && _user.Identity.IsAuthenticated && _user.IsInRole("user"))
        {
            var identity = _user.Identity as ClaimsIdentity;
            var userIdClaim = identity.Claims.First(x => x.Type == "sub");
            _userId = Guid.Parse(userIdClaim.Value);
        }
        ApplySaveStyle();
    }

    protected virtual async Task OnRatedAsync()
    {
        _rate = await _movieService.GetRateAsync(Id);
    }

    protected virtual async Task OnReviewedAsync()
    {
        _reviews = await _movieService.GetReviewsAsync(Id);
    }

    private async Task SaveMovieAsync()
    {
        if (_userId.HasValue)
        {
            var userSaving = _movie.Savings.FirstOrDefault(x => x.UserId == _userId && x.MovieId == _movie.Id);
            if (userSaving == null)
            {
                var saving = new PostSaving
                    {
                        UserId = _userId.Value,
                        MovieId = _movie.Id
                    };
                await _savingService.PostSavingAsync(saving);
            }
            else
            {
                await _savingService.DeleteSavingAsync(userSaving.Id);
            }
            _movie = await _movieService.GetMovieAsync(Id);
            ApplySaveStyle();
        }
        else
        {
            _navigation.NavigateTo("authentication/login");
        }
    }

    public void ApplySaveStyle()
    {
        if (_userId.HasValue)
        {
            var userSaving = _movie.Savings.FirstOrDefault(x => x.UserId == _userId && x.MovieId == _movie.Id);
            if (userSaving == null)
            {
                _saveStyle = "not-saved";
            }
            else
            {
                _saveStyle = "saved";
            }
        }
    }

    private void Initialise()
    {
        _movie = new GetMovie { Genres = new List<Genre>(), Country = new Country(), Image = new byte[] { } };
        _rate = new GetRate { Rates = new List<Rate>() };
        _actors = new List<Actor>();
        _reviews = new List<GetReview>();
        _user = new ClaimsPrincipal();
    }
}

<style>
    .saved {
        color: black;
    }

    .not-saved {
        color: lightgray;
    }
</style>
